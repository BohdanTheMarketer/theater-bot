import requests
from bs4 import BeautifulSoup
import schedule
import time
import json
import os
from telegram import Bot
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "urls": [
        {
            "url": "https://ft.org.ua/performances/kaligula",
            "selector": ".performanceHero__wrapper",
            "name": "Kaligula"
        },
        {
            "url": "https://ft.org.ua/performances/koriolan",
            "selector": ".performanceHero__wrapper",
            "name": "koriolan"
        },
        {
            "url": "https://ft.org.ua/performances/konotopska-vidma",
            "selector": ".performanceHero__wrapper",
            "name": "konotopska-vidma"
        },
        {
            "url": "https://ft.org.ua/performances/makbet",
            "selector": ".performanceHero__wrapper",
            "name": "makbet"
        },
        {
            "url": "https://ft.org.ua/performances/mariia-stiuart",
            "selector": ".performanceHero__wrapper",
            "name": "mariia-stiuart"
        },
        {
            "url": "https://ft.org.ua/performances/per-giunt",
            "selector": ".performanceHero__wrapper",
            "name": "per-giunt"
        },
        {
            "url": "https://ft.org.ua/performances/tartiuf",
            "selector": ".performanceHero__wrapper",
            "name": "tartiuf"
        }
    ],
    "telegram_token": "7942085933:AAHG6aqaA7e0yJL61N2HFNDbLxo3a-i9ObA",
    "chat_id": "397563510",
    "check_interval": 300,
    "state_file": "page_state.json"
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=CONFIG["telegram_token"])

def load_state():
    if os.path.exists(CONFIG["state_file"]):
        with open(CONFIG["state_file"], "r") as f:
            return json.load(f)
    return {}

def save_state(state):
    with open(CONFIG["state_file"], "w") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def get_page_content(url, selector):
    try:
        response = requests.get(url, headers=HEADERS, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        element = soup.select_one(selector)
        return element.text.strip() if element else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return None

async def send_telegram_message(message):
    try:
        await bot.send_message(chat_id=CONFIG["chat_id"], text=message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def check_pages():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...")
    state = load_state()
    new_state = {}

    for page in CONFIG["urls"]:
        url = page["url"]
        selector = page["selector"]
        name = page["name"]

        current_content = get_page_content(url, selector)
        if current_content is None:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è {name}")
            continue

        new_state[url] = current_content

        if url not in state:
            print(f"–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {name}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        elif state[url] != current_content:
            message = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{name}' ({url}):\n–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{current_content[:200]}..."
            asyncio.run(send_telegram_message(message))
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è {name}")

    save_state(new_state)

def main():
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(send_telegram_message("üé≠ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ!"))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    schedule.every(CONFIG["check_interval"]).seconds.do(check_pages)

    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    check_pages()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()
